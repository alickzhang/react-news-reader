{"version":3,"sources":["components/articles/Articles.jsx","components/input/Input.jsx","serviceWorker.js","index.js","components/app/App.jsx","shared/utils.js"],"names":["Articles","loading","articles","className","length","map","item","key","title","href","url","target","rel","author","content","defaultProps","placeholder","onChagne","onChange","Boolean","window","location","hostname","match","ReactDOM","render","useState","setLoading","setArticles","errorMsg","setErrorMsg","filterText","setFilterText","useEffect","a","process","params","country","axios","get","res","data","response","message","fetchArticles","filteredArticles","searchFields","regex","RegExp","filter","o","_","reduce","result","value","e","query","replace","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"iVAIMA,G,MAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,IAAYC,gBAAZ,MAAuB,GAAvB,SACf,yBAAKC,UAAU,qBACZF,EACC,wBAAIE,UAAU,iBAAd,uBAEA,wBAAIA,UAAU,gBACXD,EAASE,OAAS,EACjBF,EAASG,KAAI,SAAAC,GAAI,OACf,wBAAIC,IAAKD,EAAKE,MAAOL,UAAU,qBAC7B,wBAAIA,UAAU,SACZ,uBAAGM,KAAMH,EAAKI,IAAKC,OAAO,SAASC,IAAI,uBACpCN,EAAKE,QAGV,wBAAIL,UAAU,UAAUG,EAAKO,QAC7B,uBAAGV,UAAU,WAAWG,EAAKQ,aAIjC,wBAAIX,UAAU,iBAAd,kBAgBVH,EAASe,aAAe,CACtBd,SAAS,GAGID,QCxCA,G,MAAA,gBAAGgB,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,SAAhB,OAA+B,2BAAOD,YAAaA,EAAaE,SAAUD,EAAUd,UAAU,Y,uBCSzFgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,mBCCD,WAAO,IAAD,EACWC,oBAAS,GADpB,mBACZzB,EADY,KACH0B,EADG,OAEaD,mBAAS,IAFtB,mBAEZxB,EAFY,KAEF0B,EAFE,OAGaF,qBAHb,mBAGZG,EAHY,KAGFC,EAHE,OAIiBJ,mBAAS,IAJ1B,mBAIZK,EAJY,KAIAC,EAJA,KAMnBC,qBAAU,YACW,uCAAG,8BAAAC,EAAA,6DACpBP,GAAW,GACCQ,8EACNC,EAAS,CAAEC,QAAS,MAHN,kBAKAC,IAAMC,IAHdJ,8EAGuB,CAAEC,WALjB,OAKZI,EALY,OAMlBZ,EAAYY,EAAIC,KAAKvC,UANH,kDAQlB4B,EAAY,KAAIY,SAASD,KAAKE,SARZ,yBAUlBhB,GAAW,GAVO,6EAAH,qDAanBiB,KACC,IAEH,IAKMC,EC3Bc,SAACJ,EAAMV,EAAYe,GACvC,GAAmB,KAAff,EACF,OAAOU,EAET,IAAMM,EAAQ,IAAIC,OAAOjB,EAAY,KACrC,OAAOU,EAAKQ,QAAO,SAAAC,GAAC,OAClBC,IAAEC,OAAON,GAAc,SAACO,EAAQC,GAAT,OAAmBD,MAAaH,EAAEI,KAAUJ,EAAEI,GAAO/B,MAAMwB,OAAS,MDqBpEE,CAAO/C,EAAU6B,EAAY,CAAC,UAEvD,OACE,yBAAK5B,UAAU,iBACb,yBAAKA,UAAU,OACb,wBAAIA,UAAU,aAAd,qBACC0B,EACC,yBAAK1B,UAAU,aAAa0B,GAE5B,oCACE,kBAAC,EAAD,CAAOb,YAAY,+BAA+BC,SAfjC,SAAAsC,GACzB,IAAMC,EAAQD,EAAE5C,OAAO2C,MAAMG,QAAQ,QAAS,QAC9CzB,EAAcwB,MAcN,kBAAC,EAAD,CAAUvD,QAASA,EAASC,SAAU2C,SDxClC,MAASa,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMxB,c","file":"static/js/main.508c7d25.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Articles.scss';\n\nconst Articles = ({ loading, articles = [] }) => (\n  <div className=\"article-container\">\n    {loading ? (\n      <h3 className=\"article-empty\">Loading Articles...</h3>\n    ) : (\n      <ul className=\"article-list\">\n        {articles.length > 0 ? (\n          articles.map(item => (\n            <li key={item.title} className=\"article-list-item\">\n              <h2 className=\"title\">\n                <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                  {item.title}\n                </a>\n              </h2>\n              <h3 className=\"author\">{item.author}</h3>\n              <p className=\"content\">{item.content}</p>\n            </li>\n          ))\n        ) : (\n          <h3 className=\"article-empty\">Empty List</h3>\n        )}\n      </ul>\n    )}\n  </div>\n);\n\nArticles.propTypes = {\n  loading: PropTypes.bool,\n  articles: PropTypes.arrayOf({\n    title: PropTypes.string,\n    author: PropTypes.string,\n    content: PropTypes.string\n  }).isRequired\n};\n\nArticles.defaultProps = {\n  loading: false\n};\n\nexport default Articles;\n","import React from 'react';\nimport './Input.scss';\n\nexport default ({ placeholder, onChagne }) => <input placeholder={placeholder} onChange={onChagne} className=\"input\" />;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Articles from '../articles/Articles';\nimport Input from '../input/Input';\nimport { filter } from '../../shared/utils';\nimport './App.scss';\n\nexport default () => {\n  const [loading, setLoading] = useState(false);\n  const [articles, setArticles] = useState([]);\n  const [errorMsg, setErrorMsg] = useState();\n  const [filterText, setFilterText] = useState('');\n\n  useEffect(() => {\n    const fetchArticles = async () => {\n      setLoading(true);\n      const url = process.env.REACT_APP_API;\n      const params = { country: 'au' };\n      try {\n        const res = await axios.get(url, { params });\n        setArticles(res.data.articles);\n      } catch (err) {\n        setErrorMsg(err.response.data.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchArticles();\n  }, []);\n\n  const onFilterTextChange = e => {\n    const query = e.target.value.replace(/\\W|_/g, '[$&]');\n    setFilterText(query);\n  };\n\n  const filteredArticles = filter(articles, filterText, ['title']);\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"app\">\n        <h1 className=\"app-title\">React News Reader</h1>\n        {errorMsg ? (\n          <div className=\"app-error\">{errorMsg}</div>\n        ) : (\n          <>\n            <Input placeholder=\"Filter articles by headlines\" onChagne={onFilterTextChange} />\n            <Articles loading={loading} articles={filteredArticles} />\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n","import _ from 'lodash';\n\n/**\n *\n * @param {array} data row data\n * @param {string} filterText keyword used to filter row data\n * @param {array} searchFields array of fields in the row data object that used to match the keyword\n */\nexport const filter = (data, filterText, searchFields) => {\n  if (filterText === '') {\n    return data;\n  }\n  const regex = new RegExp(filterText, 'i');\n  return data.filter(o =>\n    _.reduce(searchFields, (result, value) => result || !!(o[value] && o[value].match(regex)), false)\n  );\n};\n\nexport const func = () => {};\n"],"sourceRoot":""}